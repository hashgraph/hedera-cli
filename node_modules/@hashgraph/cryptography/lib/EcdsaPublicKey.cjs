"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Key = _interopRequireDefault(require("./Key.cjs"));
var _BadKeyError = _interopRequireDefault(require("./BadKeyError.cjs"));
var _array = require("./util/array.cjs");
var hex = _interopRequireWildcard(require("./encoding/hex.cjs"));
var ecdsa = _interopRequireWildcard(require("./primitive/ecdsa.cjs"));
var _keccak = require("./primitive/keccak.cjs");
var _elliptic = _interopRequireDefault(require("elliptic"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ec = new _elliptic.default.ec("secp256k1");
const legacyDerPrefix = "302d300706052b8104000a032200";
const legacyDerPrefixBytes = hex.decode(legacyDerPrefix);
const derPrefix = "3036301006072a8648ce3d020106052b8104000a032200";
const derPrefixBytes = hex.decode(derPrefix);

/**
 * An public key on the Hederaâ„¢ network.
 */
class EcdsaPublicKey extends _Key.default {
  /**
   * @internal
   * @hideconstructor
   * @param {Uint8Array} keyData
   */
  constructor(keyData) {
    super();

    /**
     * @type {Uint8Array}
     * @private
     * @readonly
     */
    this._keyData = keyData;
  }

  /**
   * @returns {string}
   */
  get _type() {
    return "secp256k1";
  }

  /**
   * @param {Uint8Array} data
   * @returns {EcdsaPublicKey}
   */
  static fromBytes(data) {
    switch (data.length) {
      case 33:
        return EcdsaPublicKey.fromBytesRaw(data);
      default:
        return EcdsaPublicKey.fromBytesDer(data);
    }
  }

  /**
   * @param {Uint8Array} data
   * @returns {EcdsaPublicKey}
   */
  static fromBytesDer(data) {
    let ecdsaPublicKeyBytes = new Uint8Array();
    switch (data.length) {
      case 47:
        // In the case of legace DER prefix
        ecdsaPublicKeyBytes = data.subarray(legacyDerPrefixBytes.length);
        break;
      case 56:
        // The lengths of all other bytePrefixes is equal, so we treat them equally
        ecdsaPublicKeyBytes = data.subarray(derPrefixBytes.length, derPrefixBytes.length + 33);
        break;
      default:
        // In the case of uncompressed DER prefix public keys
        /* eslint-disable no-case-declarations */
        const keyPair = ec.keyFromPublic(data.subarray(derPrefixBytes.length), "der");
        const pk = keyPair.getPublic();
        const compressedPublicKeyBytes = pk.encodeCompressed("hex");
        ecdsaPublicKeyBytes = hex.decode(compressedPublicKeyBytes);
        break;
      /* eslint-enable no-case-declarations */
    }

    if (ecdsaPublicKeyBytes.length == 0) {
      throw new _BadKeyError.default(`cannot decode ECDSA private key data from DER format`);
    }
    return new EcdsaPublicKey(ecdsaPublicKeyBytes);
  }

  /**
   * @param {Uint8Array} data
   * @returns {EcdsaPublicKey}
   */
  static fromBytesRaw(data) {
    if (data.length != 33) {
      throw new _BadKeyError.default(`invalid public key length: ${data.length} bytes`);
    }
    return new EcdsaPublicKey(data);
  }

  /**
   * Parse a public key from a string of hexadecimal digits.
   *
   * The public key may optionally be prefixed with
   * the DER header.
   * @param {string} text
   * @returns {EcdsaPublicKey}
   */
  static fromString(text) {
    return EcdsaPublicKey.fromBytes(hex.decode(text));
  }

  /**
   * Verify a signature on a message with this public key.
   * @param {Uint8Array} message
   * @param {Uint8Array} signature
   * @returns {boolean}
   */
  verify(message, signature) {
    return ecdsa.verify(this._keyData, message, signature);
  }

  /**
   * @returns {Uint8Array}
   */
  toBytesDer() {
    const bytes = new Uint8Array(legacyDerPrefixBytes.length + this._keyData.length);
    bytes.set(legacyDerPrefixBytes, 0);
    bytes.set(this._keyData, legacyDerPrefixBytes.length);
    return bytes;
  }

  /**
   * @returns {Uint8Array}
   */
  toBytesRaw() {
    return new Uint8Array(this._keyData.subarray());
  }

  /**
   * @returns {string}
   */
  toEthereumAddress() {
    const hash = hex.decode((0, _keccak.keccak256)(`0x${hex.encode(ecdsa.getFullPublicKey(this.toBytesRaw()).subarray(1))}`));
    return hex.encode(hash.subarray(12));
  }

  /**
   * @param {EcdsaPublicKey} other
   * @returns {boolean}
   */
  equals(other) {
    return (0, _array.arrayEqual)(this._keyData, other._keyData);
  }
}
exports.default = EcdsaPublicKey;